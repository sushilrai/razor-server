# Thanks to William Lam for being the guru
accepteula
rootpw --iscrypted <%=
  root_password = node.metadata['root_password'] || node.root_password
  if root_password =~ /^\$\d+\$[^$]*\$/
    root_password
  else
    require 'asm/cipher'
    require 'unix_crypt'
    asm_decrypted_password = ASM::Cipher.decrypt_credential(node.root_password)['password']
    # @todo danielp 2013-11-07: if ESXi supports a stronger algorithm, we
    # should probably upgrade to using it in preference to MD5.  SHA512 is
    # current state-of-the-art practice, elsewhere.
    UnixCrypt::MD5.build(asm_decrypted_password)
  end
%>
<%=
disk_arg = ""
boot_device = ""
options = node.policy.node_metadata['installer_options']
if options && !options.empty?
  boot_device = options['target_boot_device'] || ''
  if boot_device.include?("SD")
    disk_arg += "=usb"
  end
end

if boot_device == "AHCI_VSAN" || "LOCAL_FLASH_STORAGE" || "LOCAL_FLASH_STORAGE_FOR_SCALE_IO"
  "%include /tmp/disk_info"
else
  "clearpart --firstdisk#{disk_arg} --overwritevmfs
   install --firstdisk#{disk_arg}  --overwritevmfs"
end
%>

# Set the network to DHCP on the first network adapater
# @todo danielp 2013-10-11: this needs to support static mode too...
<%=
require 'asm/util'
options = node.policy.node_metadata['installer_options']
if !options.nil? && !options.empty?
  vmnic_device = 'vmnic0'
  if options['mac_address']
    vmnic_device = options['mac_address']
  else
    interfaces = node.facts['interfaces'].strip.split(',')
    interfaces.each do |interface|
      if node.facts["ipaddress_#{interface}"] && node.facts["macaddress_#{interface}"]
        vmnic_device = node.facts["macaddress_#{interface}"]
        break
      end
    end
  end

  line = "network --bootproto=static --device=#{vmnic_device} --ip=#{options['static_ip']}  --netmask=#{options['netmask']}"
  line += " --gateway=#{options['gateway']}" if options['gateway'] && options['gateway'].match(/(\d+\.){3}\d+$/)

  # NOTE: vlanId is a FixNum
  if options['vlanId']
    line += " --vlanid=#{options['vlanId']}"
  end

  if options['nameserver']
    line += " --nameserver=#{options['nameserver']}"
  else
    line += ' --nodns'
  end
  if options['hostname']
    line += " --hostname='#{options['hostname']}'"
  end
  line
else
  'network --bootproto=dhcp --device=vmnic0'
end
%>

reboot --noeject

# %include /tmp/networkconfig
%pre --interpreter=busybox
wget <%= stage_done_url("kickstart") %>

for DISK in $(ls /dev/disks | grep -v vml); do
  DISK_PATH=/dev/disks/${DISK}
  is_local=`localcli storage core device list -d $DISK | grep -i "Is Local: true"`
  echo "Is local output: $is_local"
  if [ -z "$is_local" ] ; then
    echo "skipping non local disk $DISK"
    continue
  fi
  partedUtil mklabel $DISK_PATH msdos
done


disk_paths=`localcli storage core device list | grep "Devfs Path"`
for disk in $disk_paths; do
  if [ "$disk" == "Path:" -o "$disk" == "Devfs" ] ;  then
    continue
  fi
  boot_device=<%=node.policy.node_metadata['installer_options']['target_boot_device']%>
  device=`basename $disk`
  local_ata=`localcli storage core device list -d $device | grep -iE "Local ATA Disk|DELL Serial|Local DELL Disk|DELLBOSS|SATADOM"`
  if [ $? -eq 0 ]; then
    local_sas=`localcli storage core device list -d $device | grep -i "Is SAS: false"`
    if [ "$boot_device" == "LOCAL_FLASH_STORAGE" ] || [ "$boot_device" == "LOCAL_FLASH_STORAGE_FOR_SCALE_IO" ] ; then
      other_local_disk=`localcli storage core device list -d $device | grep -iE "SATADOM|DELLBOSS"`
    else
      other_local_disk=`localcli storage core device list -d $device | grep -iE "DELL Serial|Local DELL Disk"`
    fi
    if [ -z "$local_sas" -a -z "$other_local_disk" ] ; then
      continue
    fi
    model=`localcli storage core device list -d $device | grep -i "Model:" | cut -d ":" -f2`
    model=`echo $model | awk '{$1=$1;print}'`
    echo clearpart --firstdisk=\"${model}\",local --overwritevmfs > /tmp/disk_info
    echo install --firstdisk=\"${model}\",local --overwritevmfs >> /tmp/disk_info
  fi
done

# Cleanup VSAN Partition data
disk_paths=`localcli storage core device list | grep "Devfs Path" | grep -vi "cdrom"`
for disk in $disk_paths; do
  if [ "$disk" == "Path:" -o "$disk" == "Devfs" ] ;  then
    continue
  fi
  echo "Disk: $disk"
  is_local=`localcli storage core device list -d $DISK | grep -i "Is Local: true"`
  echo "Is local output: $is_local"
  if [ -z "$is_local" ] ; then
    echo "skipping non local disk $DISK"
    continue
  fi
  partition_data=`partedUtil getptbl $disk | grep vsan | awk '{print -f1}'`
  if [ $? -eq 0 ] ; then
    echo "Partition Data: $partition_data"
    partedUtil delete $disk partition_data
  fi
done

# Cleanup VMFS Partition data
for DISK in $(ls /vmfs/devices/disks | grep -v vml);
  do
    DISK_PATH=/vmfs/devices/disks/${DISK}
    echo "Disk Path: $DISK_PATH"
    is_local=`localcli storage core device list -d $DISK | grep -i "Is Local: true"`
    echo "Is local output: $is_local"
    if [ -z "$is_local" ] ; then
      echo "skipping non local disk $DISK"
      continue
    fi

    VMFS_PARTITION_ID=$(partedUtil getptbl ${DISK_PATH} | grep vmfs | awk '{print $1}')
    if [[ ! -z ${VMFS_PARTITION_ID} ]] && [[ ${VMFS_PARTITION_ID} -eq 3 ]]; then
      echo "Deleting partion for disk $disk_path"
      partedUtil delete ${DISK_PATH} 3
    fi
done

echo "Pre execution done"




%firstboot --interpreter=busybox

# The following sleep is a workaround for this:
#
# http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=2007696
#
# The ticket states  that 30 seconds is a long enough  fix but we have
# seen cases where it is not

sleep 300
# set the hostname correctly before we do anythig else
esxcli system hostname set --fqdn <%= node.metadata['hostname'] || node.hostname %>

# enable HV (Hardware Virtualization to run nested 64bit Guests + Hyper-V VM)
grep -i 'vhv.allow' /etc/vmware/config || echo 'vhv.allow = 'TRUE'' >> /etc/vmware/config

# enable SSH support
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh

# enable & start ESXi Shell (TSM)
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1
esxcli system hostname set --fqdn <%= node.hostname %>

# rename local datastore to something more meaningful
vim-cmd hostsvc/datastore/rename datastore1 "$(hostname -s)-local-storage-1"

# assign license
# vim-cmd vimsvc/license --set <%= @esx_license %>


# change the individual syslog rotation count
esxcli system syslog config logger set --id=hostd --rotate=20 --size=2048
esxcli system syslog config logger set --id=vmkernel --rotate=20 --size=2048
esxcli system syslog config logger set --id=fdm --rotate=20
esxcli system syslog config logger set --id=vpxa --rotate=20

#add the puppet master host entry in /etc/hosts
echo "<%= URI.parse(repo_url).host %> dellasm" >> /etc/hosts

<%=
  require 'asm/util'
  options = node.policy.node_metadata['installer_options']
  if options['dns_suffix'] && options['dns_suffix'] != "undef"
    dns_suffix = options['dns_suffix']
    "esxcli network ip dns search add --domain=#{dns_suffix}"
  end
%>

<%=
  require 'asm/util'
  options = node.policy.node_metadata['installer_options']
  if options['domain'] && options['domain'] != "undef"
    domain = options['domain']
    "esxcli system hostname set --domain=#{domain}"
  end
%>

# NTP Setting
ntp_server="<%=
    require 'asm/util'
    base_dir=File.join(ASM::Util::INSTALLER_OPTS_DIR, task.name)
    options = node.policy.node_metadata['installer_options'] || {}
    (options['ntp_server'] || '').strip.size > 0 ? options['ntp_server'] : ""

%>"
### NTP CONFIGURATIONS ###
if [ "$ntp_server" != "" ]; then
cat > /etc/ntp.conf << __NTP_CONFIG__
restrict default kod nomodify notrap nopeer
restrict 127.0.0.1
<% (options['ntp_server'] || '').strip.split(',').each do |ntp| %>
server <%= ntp.strip %>
<% end %>
driftfile /etc/ntp.drift
__NTP_CONFIG__
/etc/init.d/ntpd restart
/sbin/chkconfig ntpd on
fi

# enter maintenance mode
vim-cmd hostsvc/maintenance_mode_enter

## Disable firewall to call stage_done_url
esxcli network firewall set --default-action false --enabled no

wget <%= stage_done_url("finished") %>

### FIREWALL CONFIGURATION ###

# enable firewall
esxcli network firewall set --default-action false --enabled yes

# services to enable by default
FIREWALL_SERVICES='syslog sshClient ntpClient updateManager httpClient netdump'
for SERVICE in ${FIREWALL_SERVICES}; do
    esxcli network firewall ruleset set --ruleset-id ${SERVICE} --enabled yes
done

# backup ESXi configuration to persist changes
/sbin/auto-backup.sh

# enter maintenance mode
#vim-cmd hostsvc/maintenance_mode_enter

# copy %first boot script logs to persisted datastore
cp /var/log/hostd.log "/vmfs/volumes/$(hostname -s)-local-storage-1/firstboot-hostd.log"
cp /var/log/hostd.log "/vmfs/volumes/datastore1/firstboot-hostd.log"
cp /var/log/esxi_install.log "/vmfs/volumes/$(hostname -s)-local-storage-1/firstboot-esxi_install.log"
cp /var/log/esxi_install.log "/vmfs/volumes/datastore1/firstboot-esxi_install.log"
wget <%= stage_done_url("finished") %>
reboot

