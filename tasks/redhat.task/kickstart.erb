#!/bin/bash
# Kickstart for RHEL/CentOS 6
# see: http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Installation_Guide/s1-kickstart2-options.html

install
url --url=<%= repo_url %>
cmdline
lang en_US.UTF-8
keyboard us
rootpw --iscrypted <%=
    require 'asm/cipher'
    require 'unix_crypt'
    asm_decrypted_password = ASM::Cipher.decrypt_string(node.root_password)
    UnixCrypt::SHA512.build(asm_decrypted_password)
%>
<%

   options = node.policy.node_metadata["installer_options"]
   k_opts = ""
   if options && options["network_configuration"]
     require "json"
     require "asm/network_configuration"

     kernel_opts = {}

     network_config = ASM::NetworkConfiguration.new(JSON.parse(options["network_configuration"]))
     partition = network_config.get_partitions("PXE").first
     if partition
       kernel_opts["--device"] = partition.mac_address if partition.mac_address

       network = partition.networkObjects.find { |p| p["type"] == "PXE" }
       static = network.static && network.staticNetworkConfiguration
       if static
         kernel_opts["--bootproto"] = "static"
         kernel_opts.merge!("--ip" => static.ipAddress, "--netmask" => static.subnet, "--gateway" => static.gateway)
         dns_server = [static.primaryDns, static.secondaryDns].compact.first
         kernel_opts["--nameserver"] = dns_server if dns_server
       end
     end
     k_opts = kernel_opts.map { |k, v| "%s=%s" % [k, v] }.join(" ")
   end

%>
network --hostname <%= node.hostname %> <%= k_opts unless k_opts.empty? %>
firewall --enabled --ssh
authconfig --enableshadow --passalgo=sha512 --enablefingerprint
<%=
    options = node.policy.node_metadata['installer_options'] || {}
    (options['time_zone'] || '').strip.size > 0 ? "timezone --utc #{options['time_zone']}" : 'timezone --utc America/Los_Angeles'

%>
# Avoid having 'rhgb quiet' on the boot line
bootloader --location=mbr --append="crashkernel=auto"

%include /tmp/ignoredisk

# reboot automatically
reboot

# followig is MINIMAL https://partner-bugzilla.redhat.com/show_bug.cgi?id=593309
%packages --ignoremissing
@core
@System Tools
automake
gcc
cpp
glibc-devel
glibc-headers
glibc-kernelheaders
glibc
glibc-common
libgcc
zlib-devel
openssl-devel
readline-devel
augeas-libs
<% if task.os_version == '7' %>
libselinux-ruby
<% end %>
ruby-irb
ruby-rdoc
ruby
ntp
smartmontools
usbutils
policycoreutils-python
mutt
wget
numactl
java-1.8.0-openjdk
python-cryptography

%end

# Only install the OS on the first virtual volume
%pre
  FIRST_PERC_VOL=$(ls -1 /dev/disk/by-path/pci-*-scsi-0:[1-9]:0:0 | head -1)
   if [ -z "${FIRST_PERC_VOL}" ]; then
     FIRST_PERC_VOL=$(ls -1 /dev/disk/by-path/pci-*-scsi* | sort -t- -k 4 | head -1)
   fi

  echo "zerombr" > /tmp/ignoredisk
  echo "ignoredisk --only-use=$FIRST_PERC_VOL" >> /tmp/ignoredisk
  echo "clearpart --all --initlabel"  >> /tmp/ignoredisk
  echo "autopart" >> /tmp/ignoredisk
%end

%post --log=/var/log/razor.log
echo Kickstart post
curl -s -o /root/razor_postinstall.sh <%= file_url("post_install") %>

# Run razor_postinstall.sh on next boot via rc.local
if [ ! -f /etc/rc.d/rc.local ]; then
  # On systems using systemd /etc/rc.d/rc.local does not exist at all
  # though systemd is set up to run the file if it exists
  touch /etc/rc.d/rc.local
fi
chmod a+x /etc/rc.d/rc.local
echo bash /root/razor_postinstall.sh >> /etc/rc.d/rc.local
chmod +x /root/razor_postinstall.sh

curl -s <%= stage_done_url("kickstart") %>
%end
############
